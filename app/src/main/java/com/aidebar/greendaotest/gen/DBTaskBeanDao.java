package com.aidebar.greendaotest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.education.myoschinatest.bean.DBTaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBTASK_BEAN".
*/
public class DBTaskBeanDao extends AbstractDao<DBTaskBean, Long> {

    public static final String TABLENAME = "DBTASK_BEAN";

    /**
     * Properties of entity DBTaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CreatTimeAsId = new Property(0, long.class, "creatTimeAsId", true, "_id");
        public final static Property TaskName = new Property(1, String.class, "taskName", false, "DBTaskBean");
        public final static Property TaskDescribe = new Property(2, String.class, "taskDescribe", false, "TASK_DESCRIBE");
        public final static Property TaskNumber = new Property(3, String.class, "TaskNumber", false, "TASK_NUMBER");
        public final static Property TaskProgressDescribe = new Property(4, String.class, "taskProgressDescribe", false, "TASK_PROGRESS_DESCRIBE");
        public final static Property TaskProgress = new Property(5, int.class, "taskProgress", false, "TASK_PROGRESS");
        public final static Property Others = new Property(6, String.class, "others", false, "OTHERS");
        public final static Property EndTime = new Property(7, long.class, "endTime", false, "END_TIME");
    }


    public DBTaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBTaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBTASK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: creatTimeAsId
                "\"DBTaskBean\" TEXT," + // 1: taskName
                "\"TASK_DESCRIBE\" TEXT," + // 2: taskDescribe
                "\"TASK_NUMBER\" TEXT," + // 3: TaskNumber
                "\"TASK_PROGRESS_DESCRIBE\" TEXT," + // 4: taskProgressDescribe
                "\"TASK_PROGRESS\" INTEGER NOT NULL ," + // 5: taskProgress
                "\"OTHERS\" TEXT," + // 6: others
                "\"END_TIME\" INTEGER NOT NULL );"); // 7: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBTASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBTaskBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTimeAsId());
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(2, taskName);
        }
 
        String taskDescribe = entity.getTaskDescribe();
        if (taskDescribe != null) {
            stmt.bindString(3, taskDescribe);
        }
 
        String TaskNumber = entity.getTaskNumber();
        if (TaskNumber != null) {
            stmt.bindString(4, TaskNumber);
        }
 
        String taskProgressDescribe = entity.getTaskProgressDescribe();
        if (taskProgressDescribe != null) {
            stmt.bindString(5, taskProgressDescribe);
        }
        stmt.bindLong(6, entity.getTaskProgress());
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(7, others);
        }
        stmt.bindLong(8, entity.getEndTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBTaskBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCreatTimeAsId());
 
        String taskName = entity.getTaskName();
        if (taskName != null) {
            stmt.bindString(2, taskName);
        }
 
        String taskDescribe = entity.getTaskDescribe();
        if (taskDescribe != null) {
            stmt.bindString(3, taskDescribe);
        }
 
        String TaskNumber = entity.getTaskNumber();
        if (TaskNumber != null) {
            stmt.bindString(4, TaskNumber);
        }
 
        String taskProgressDescribe = entity.getTaskProgressDescribe();
        if (taskProgressDescribe != null) {
            stmt.bindString(5, taskProgressDescribe);
        }
        stmt.bindLong(6, entity.getTaskProgress());
 
        String others = entity.getOthers();
        if (others != null) {
            stmt.bindString(7, others);
        }
        stmt.bindLong(8, entity.getEndTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBTaskBean readEntity(Cursor cursor, int offset) {
        DBTaskBean entity = new DBTaskBean( //
            cursor.getLong(offset + 0), // creatTimeAsId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // taskName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taskDescribe
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // TaskNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // taskProgressDescribe
            cursor.getInt(offset + 5), // taskProgress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // others
            cursor.getLong(offset + 7) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBTaskBean entity, int offset) {
        entity.setCreatTimeAsId(cursor.getLong(offset + 0));
        entity.setTaskName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskDescribe(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaskProgressDescribe(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTaskProgress(cursor.getInt(offset + 5));
        entity.setOthers(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndTime(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBTaskBean entity, long rowId) {
        entity.setCreatTimeAsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBTaskBean entity) {
        if(entity != null) {
            return entity.getCreatTimeAsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBTaskBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
